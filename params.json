{"name":"Pattern-js","tagline":"Pocket-sized minimalist framework of common design patterns for JavaScript.","body":"### Totally Useful and Reusable.\r\nSpeed up your development by using tested and proven design patterns for JavaScript.\r\n\r\nQuick usage example:\r\n\r\n```\r\nvar logger = Pattern.Observer({\r\n\twrite: function( data ) {\r\n\t\tconsole.log( \"message: \" + data.msg );\r\n\t}\r\n});\r\nvar emitter = Pattern.Observable({\r\n\tinit: function() {\r\n\t\tthis.addObserver( logger );\r\n\t},\r\n\tnotify: function( name, msg ) {\r\n\t\tthis.notifyObservers({\r\n\t\t\teventName: name,\r\n\t\t\tdata: {msg: msg}\r\n\t\t});\r\n\t}\r\n});\r\n\r\nemitter.notify( \"write\", \"The quick brown fox jumps...\" );\r\n```\r\nConsole output:\r\n```\r\nmessage: The quick brown fox jumps...\r\n```\r\n\r\n### Observer/Observable\r\nObserver Pattern plus messaging framework with dynamic mapping of events to observer methods.\r\n\r\n### Publisher/Subscriber\r\nLight weight pub/sub with custom events.\r\n\r\n### Event Signal\r\nQueue of listeners for easy transport of events and data.\r\n\r\n### Model View Controller\r\nClassic MVC Pattern\r\n\r\n### Object Factory\r\nSupports 'extends', 'public', and 'implements' for interface methods.\r\n\r\n### Queue\r\nFIFO\r\n\r\n### Support or Contact\r\nDocumentation coming soon. http://help.github.com/pages","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}